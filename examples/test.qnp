import "std.qnp"

import "fileio.qnp"

void printBlockList():
	std.print("- - - - - - - - - -\n")
	std.print("ChunkList:\n")
	std.__MemBlockHeader* curr = std.__memBlocks
	while curr != null:
		std.print(" This: %\n", (u64)curr)
		std.print(" Prev: %\n", (u64)curr->prev)
		std.print(" Next: %\n", (u64)curr->next)
		std.print(" Size: %\n", curr->sizeAvail)

		std.print(" DiffToPrev: ")
		if curr->prev != null: std.print((u64)curr - (u64)curr->prev, "\n")
		else: std.print("--\n")

		std.print(" DiffToNext: ")
		if curr->next != null: std.print((u64)curr->next - (u64)curr, "\n")
		else: std.print("--\n")

		std.print("\n")

		curr = curr->next
	std.print("-------------------\n\n")

i64 brkDiff():
	static i64 lastBrk = 0
	i64 currBrk = std.__brk(0)
	i64 diff = currBrk - lastBrk
	lastBrk = currBrk
	return diff
brkDiff()

void printBrkDiff():
	std.print("BrkDiff: ", brkDiff(), "\n")

printBlockList()

std.print("Allocating 100 bytes\n")
void* buff1 = std.malloc(100)
printBrkDiff()
printBlockList()
std.print("Allocating 10000 bytes\n")
void* buff2 = std.malloc(10000)
printBrkDiff()
printBlockList()

std.print("Freeing 100 bytes\n")
std.free(buff1)
printBrkDiff()
printBlockList()

std.print("Freeing 10000 bytes\n")
std.free(buff2)
printBrkDiff()
printBlockList()

std.print("Allocating 12000 bytes\n")
buff1 = std.malloc(12000)
printBrkDiff()
printBlockList()

std.print("Freeing 12000 bytes\n")
std.free(buff1)
printBrkDiff()
printBlockList()

std.print("Allocating 1024 megabytes...")
buff1 = std.malloc(1024 * 1024 * 1024)
std.print(" DONE\n")
printBrkDiff()
printBlockList()

std.print("Clearing buff1... ")
u64 begin = std.getTime()
std.memset(buff1, 0, 1024 * 1024 * 1024)
u64 end = std.getTime()
std.print(" DONE\n -> Time: % ms\n", end - begin)

u8* str = (u8*)"ABCDEFGHIJKLMNOPQRSTUVWXYZ\n"
std.memcpy(str, "..................", 9)
std.print("%-----------------\n", str)

std.print("Freeing 1024 megabytes...")
std.free(buff1)
std.print(" DONE\n")
printBrkDiff()
printBlockList()

u8* str1 = (u8*)"Hello world, my name is TecStylos!"
u8* tok = std.strtok(str1, " ")
while tok:
	std.print(tok, "\n")
	tok = std.strtok(null, " ")

u8 const* str2 = \
	"Hello world, " \
	"my name is TecStylos!\n"
std.print(str2)

i64 const var = 10 * 12 + 100

std.print(var, "\n")

enum Color:
	Red, Green, Blue

std.print((u64)Color.Green, "\n")

std.toupper('a')
std.tolower('A')

u8 buff[10000]

std.File* f = std.fopen("examples/test.qnp", "r")
std.print("Read % bytes\n", std.fread(f, buff, sizeof(buff) - 1))
std.fclose(f)
buff[sizeof(buff) - 1] = 0
std.print("Text read:\n%\n", buff)

enum Data:
	A = -10
	B
	C
	D = 10

std.print((i64)Data.C, "\n")

u8* testStr1 = (u8*)"This is a test string"
u8* testStr2 = (u8*)"This is a test string"

testStr1[0] = '.'

std.print("TestStr1: ", testStr1, "\n")
std.print("TestStr2: %\n", testStr2)

std.print("\n")

std.print("TestStr1: %\nTestStr2: %\n", testStr1, testStr2)

std.print("File:Line -> %:%\n", __file__, __line__)
std.print("File:Line -> ", __file__, ":", __line__, "\n")

blueprint
i32 sum(i32 a, i32 b):
	return a + b

blueprint
i32 sum(i32 a, ...):
	return a + sum(...)

std.print("Sum: %\n", sum(1, 2))

std.__assert(sum(1, 2) == 3, "Sum failed", __file__, __line__)

alias print = std.print

print("HELLO_WORLD\n")