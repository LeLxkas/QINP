import "stdlib/std.qnp"

u32 var1 = 5 * 3
u64 var2 = 100 + var1
u8 var3 = var2
u64 var4 = var3 + 10
u64 var5 = 2
var5 = (var5 << 2) + var4

asm: "mov rax, 100"
asm: "mov [$(var5)], rax"
\\ ^^^ is the same as vvv
assembly:
	"mov rax, 255"
	"mov [$(var5)], rax"
var5 = '9' - '0' + 10

(&var4)[0] = (&var5)[0] ^ 2

bool b = ~!(!var4 && !var5)
b = true
b = false
b = true || false

void foo():
	exit(5)

u64 square(u64 x):
	return x * x

exit(square(4))