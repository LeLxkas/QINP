import "std.qnp"

define WIDTH 20
define HEIGHT 10
define N_ITERATIONS 50

pack Grid:
	bool cells[WIDTH][HEIGHT]

Grid grids[2]

Grid* pMain = grids + 0
Grid* pBack = grids + 1

void flip():
	Grid* pTemp = pMain
	pMain = pBack
	pBack = pTemp

void printBorder():
	std::print("+")
	i64 i = 0
	while i++ < WIDTH:
		std::print("-")
	std::print("+\n")

void show():
	i64 i = 0
	printBorder()
	while i < HEIGHT:
		i64 j = 0
		std::print("|")
		while j < WIDTH:
			if pMain->cells[j][i]:
				std::print("#")
			else:
				std::print(" ")
			++j
		std::print("|\n")
		++i
	printBorder()

void clear():
	std::print("\r")
	i64 i = 0
	while i++ < HEIGHT + 2:
		std::print("\e[1F")

void update():
	i64 i = 0
	while i < WIDTH:
		i64 j = 0
		while j < HEIGHT:
			i64 count = 0
			i64 k = i-1
			while k < i+2:
				i64 l = j-2
				while ++l < j+2:
					if (k >= 0 && k < WIDTH) && \
						(l >= 0 && l < HEIGHT) && \
						(k != i || l != j):
						count += pMain->cells[k][l]
				++k
			if pMain->cells[i][j]:
				pBack->cells[i][j] = (2 <= count && count <= 3)
			else:
				pBack->cells[i][j] = (count == 3)
			++j
		++i

bool hasChanged():
	i64 i = 0
	while i < WIDTH:
		i64 j = 0
		while j < HEIGHT:
			if pMain->cells[i][j] != pBack->cells[i][j]:
				return true
			++j
		++i
	return false

grids[0].cells[0][2] = true
grids[0].cells[1][0] = true
grids[0].cells[1][2] = true
grids[0].cells[2][1] = true
grids[0].cells[2][2] = true

i64 n = 0
while n++ < N_ITERATIONS:
	show()
	update()
	std::sleep(100)
	clear()
	flip()

	if !hasChanged():
		break
show()

std::print("Ran for ")
std::print(n)
std::print(" iterations\n")