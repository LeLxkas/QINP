\\ QINP Standard Library
\\ Strings

space std:
	\\ Determine the length of a string (without the null terminator)
	\\ @param str The null-terminated string to measure
	\\ @return The length of the string
	u64 strlen(u8* str)...

	\\ Convert a string to lowercase (in place)
	\\ @param str The string to convert
	\\ @return The pointer to the passed string
	u8* strlwr(u8* str)...

	\\ Convert the first num characters of a string to lowercase (in place)
	\\ Does not check for null terminator
	\\ @param str The string to convert
	\\ @param num The number of characters to convert
	\\ @return The pointer to the passed string
	u8* strlwr(u8* str, u64 num)...

	\\ Convert a string to uppercase (in place)
	\\ @param str The string to convert
	\\ @return The pointer to the passed string
	u8* strupr(u8* str)...

	\\ Convert the first num characters of a string to uppercase (in place)
	\\ Does not check for null terminator
	\\ @param str The string to convert
	\\ @param num The number of characters to convert
	\\ @return The pointer to the passed string
	u8* strupr(u8* str, u64 num)...

	\\ Concatenates two strings
	\\ @param dest The destination string to concatenate to
	\\ @param src The source string to concatenate
	\\ @return The pointer to the destination string
	u8* strcat(u8* dest, u8* src)...
	
	\\ Concatenates two strings
	\\ @param dest The destination string to concatenate to
	\\ @param src The source string to concatenate
	\\ @param len The number of characters to concatenate (excluding the null terminator)
	u8* strcat(u8* dest, u8* src, u64 num)...
	
	\\ Copy a null-terminated string
	\\ @param dest The destination buffer
	\\ @param src The source string
	\\ @return The destination buffer
	u8* strcpy(u8* dest, u8* src)...

	\\ Copy the first num characters of a string
	\\ @param dest The destination buffer
	\\ @param src The source string
	\\ @param len The number of characters to copy (excluding the null terminator)
	\\ @return The destination buffer
	u8* strcpy(u8* dest, u8* src, u64 num)...
	
	\\ Compare two null-terminated strings
	\\ @param str1 The first string
	\\ @param str2 The second string
	\\ @return 0 if the strings are equal, < 0 if str1 is less than str2, > 0 if str1 is greater than str2
	i32 strcmp(u8* str1, u8* str2)...

	\\ Compare the first num characters of two strings
	\\ @param str1 The first string
	\\ @param str2 The second string
	\\ @param num The number of characters to compare
	\\ @return 0 if the strings are equal, < 0 if str1 is less than str2, > 0 if str1 is greater than str2
	i32 strcmp(u8* str1, u8* str2, u64 num)...

	\\ Compare two null-terimated strings without case sensitivity
	\\ @param str1 The first string
	\\ @param str2 The second string
	\\ @return 0 if the strings are equal, < 0 if str1 is less than str2, > 0 if str1 is greater than str2
	i32 strcmpi(u8* str1, u8* str2)...

	\\ Compare the first num characters of two strings without case sensitivity
	\\ @param str1 The first string
	\\ @param str2 The second string
	\\ @param num The number of characters to compare
	\\ @return 0 if the strings are equal, < 0 if str1 is less than str2, > 0 if str1 is greater than str2
	i32 strcmpi(u8* str1, u8* str2, u64 num)...

	\\ Locate the first occurencce of a character in a string
	\\ @param str The string to search
	\\ @param ch The character to search for
	\\ @return The address of the first occurence of ch in str, or NULL if not found
	u8* strchr(u8* str, u8 ch)...
	
	\\ Locate the last occurence of a character in a string
	\\ @param str The string to search
	\\ @param ch The character to search for
	\\ @return The address of the last occurence of ch in str, or NULL if not found
	u8* strrchr(u8* str, u8 ch)...

	\\ Locate the first occurence of a substring in a string
	\\ @param str The string to search
	\\ @param substr The substring to search for
	\\ @return The address of the first occurence of substr in str, or NULL if not found
	u8* strstr(u8* str, u8* substr)...

	\\ Locate the last occurence of a substring in a string
	\\ @param str The string to search
	\\ @param substr The substring to search for
	\\ @return The address of the last occurence of substr in str, or NULL if not found
	u8* strrstr(u8* str, u8* substr)...
	
	\\ Set all characters in a string to a specified character
	\\ @param str The string to modify
	\\ @param ch The character to set
	\\ @return The pointer to the passed string
	u8* strset(u8* str, u8 ch)...

	\\ Set the first num characters of a string to a specified character
	\\ @param str The string to modify
	\\ @param ch The character to set
	\\ @param num The number of characters to set
	u8* strset(u8* str, u8 ch, u64 num)...

	\\ Reverse a null-terminated string
	\\ @param str The null-terminated string to reverse
	\\ @return The reversed string
	u8* strrev(u8* str)...

	\\ Reverse a string of specified length
	\\ @param begin Pointer to the first character of the string to reverse
	\\ @param end Pointer to the character after the last character of the string to reverse (usually the null-terminator)
	\\ @return The reversed string
	u8* strrev(u8* begin, u8* end)...

	\\ Convert an integer to a string
	\\ @param num The integer to convert
	\\ @param str The string to store the converted integer in
	\\ @param base The base to use for the conversion (Valid values are 2 to 36)
	\\ @return The null-terminated string representation of the integer
	u8* itos(i64 num, u8* str, i64 base)...

	\\ Convert a string to a base-10 integer
	\\ @param str The string to convert
	\\ @param base The base to use for the conversion (Valid values are 2 to 36)
	\\ @return The integer represented by the string
	i64 stoi(u8* str, i64 base)...

	\\ Converts a character to uppercase. Values not in the range 'a' to 'z' are unchanged.
	\\ @param c The character to convert
	\\ @return The uppercase character
	u8 toupper(u8 c)...

	\\ Converts a character to lowercase. Values not in the range 'A' to 'Z' are unchanged.
	\\ @param c The character to convert
	\\ @return The lowercase character
	u8 tolower(u8 c)...


	u8* __baseCharsLower = "0123456789abcdefghijklmnopqrstuvwxyz"


	u64 strlen(u8* str):
		u8* begin = str
		while *str:
			++str
		return str - begin

	u8* strlwr(u8* str):
		u8* begin = str
		while *str:
			*str = tolower(*str)
			++str
		return begin

	u8* strlwr(u8* str, u64 num):
		u8* begin = str
		while num--:
			*str = tolower(*str)
			++str
		return begin

	u8* strupr(u8* str):
		u8* begin = str
		while *str:
			*str = toupper(*str)
			++str
		return begin

	u8* strupr(u8* str, u64 num):
		u8* begin = str
		while num--:
			*str = toupper(*str)
			++str
		return begin
	
	u8* strcat(u8* dest, u8* src):
		u8* begin = dest
		dest += strlen(dest)
		strcpy(dest, src)
		return begin

	u8* strcat(u8* dest, u8* src, u64 num):
		u8* begin = dest
		dest += strlen(dest)
		strcpy(dest, src, num)
		return begin

	u8* strcpy(u8* dest, u8* src):
		u8* begin = dest
		while *src:
			*dest++ = *src++
		*dest = '\0'
		return begin

	u8* strcpy(u8* dest, u8* src, u64 num):
		u8* begin = dest
		while num--:
			*dest++ = *src++
		*dest = '\0'
		return begin
	
	i32 strcmp(u8* str1, u8* str2):
		while *str1 && *str2:
			if *str1 != *str2:
				break
			++str1
			++str2
		return (i32)*str1 - (i32)*str2

	i32 strcmp(u8* str1, u8* str2, u64 num):
		while num--:
			if *str1 != *str2:
				break
			++str1
			++str2
		return num == -1 ? (i32)0 : (i32)*str1 - (i32)*str2

	i32 strcmpi(u8* str1, u8* str2):
		while *str1 && *str2:
			if tolower(*str1) != tolower(*str2):
				break
			++str1
			++str2
		return (i32)tolower(*str1) - (i32)tolower(*str2)

	i32 strcmpi(u8* str1, u8* str2, u64 num):
		while num--:
			if tolower(*str1) != tolower(*str2):
				break
			++str1
			++str2
		return num == -1 ? (i32)0 : (i32)tolower(*str1) - (i32)tolower(*str2)

	u8* strchr(u8* str, u8 ch):
		while *str:
			if *str == ch:
				return str
			++str
		return null

	u8* strrchr(u8* str, u8 ch):
		u8* last = null
		while *str:
			if *str == ch:
				last = str
			++str
		return last

	u8* strstr(u8* str, u8* substr):
		u64 mainlen = strlen(str)
		u64 sublen = strlen(substr)
		while mainlen >= sublen:
			if !strcmp(str, substr, sublen):
				return str
			++str
			--mainlen
		return null

	u8* strrstr(u8* str, u8* substr):
		u64 mainlen = strlen(str)
		u64 sublen = strlen(substr)
		u8* last = null
		while mainlen >= sublen:
			if !strcmp(str, substr, sublen):
				last = str
			++str
			--mainlen
		return last

	u8* strset(u8* str, u8 ch):
		u8* begin = str
		while *str:
			*str++ = ch
		return begin

	u8* strset(u8* str, u8 ch, u64 num):
		u8* begin = str
		while num--:
			*str++ = ch
		return begin

	u8* strrev(u8* str):
		return strrev(str, str + strlen(str))

	u8* strrev(u8* begin, u8* end):
		u8* str = begin
		u8 temp

		while begin < end:
			temp = *begin
			*begin++ = *--end
			*end = temp

		return str

	u8* itos(i64 num, u8* str, i64 base):
		u8* begin = str
		bool negative = num < 0

		if negative:
			num *= -1

		do:
			*str++ = __baseCharsLower[num % base]
			num /= base
		while num

		if negative:
			*str++ = '-'

		*str = '\0'

		return strrev(begin, str)

	i64 stoi(u8* str, i64 base):
		i64 num = 0
		bool negative = *str == '-'
		if negative:
			++str

		while *str:
			i64 index = (i64)(strchr(__baseCharsLower, tolower(*str++)) - __baseCharsLower)
			num = num * base + index

		if negative:
			num = -num

		return num

	u8 toupper(u8 c):
		if c < 'a' || c > 'z':
			return c
		return c - 'a' + 'A'

	u8 tolower(u8 c):
		if c < 'A' || c > 'Z':
			return c
		return c - 'A' + 'a'