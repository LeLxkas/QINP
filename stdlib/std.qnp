\\ QINP Standard Library
\\ Platform independent implementation


import "math.qnp"
import "memory.qnp"
import "string.qnp"
import "time.qnp"


\\ Convenience definitions
define EXIT_SUCCESS 0
define EXIT_FAILURE 1

define char i8
define short i16
define int i32
define long i64

define uchar u8
define ushort u16
define uint u32
define ulong u64


space std:
	\\ Terminate the calling process and return the specified exit status.
	\\ @param status The exit status to return to the parent process.
	void exit(i32 status)...		\\ Platform dependent implementation

	\\ Print a null-terminated string to stdout
	\\ @param str The null-terminated string to print
	\\ @return The number of characters printed. Negative on error.
	i32 print(u8* str)...
	\\ blueprint T
	\\ i32 print(const T& str)...

	\\ Formatted print
	\\ blueprint T,
	\\ i32 print(const T& str, const T& value)...
	\\ blueprint T, ...
	\\ i32 print(const u8* str, const T& value, ...)...

	\\ Print a string of specified length to stdout
	\\ @param str The string to print
	\\ @param len The length of the string to print
	\\ @return The number of characters printed. Negative on error.
	i32 print(u8* str, u64 len)...		\\ Platform dependent implementation

	\\ Print a base-10 integer to stdout
	\\ @param num The integer to print
	\\ @return The number of characters printed. Negative on error.
	i32 print(i64 num)...

	\\ Reads a character from stdin
	\\ @return The character read from stdin
	u8 getchar()...		\\ Platform dependent implementation

	\\ Read a null-terminated string from stdin
	\\ @param dest The destination buffer
	\\ @param size The size of the destination buffer
	\\ @return Address of the destination buffer
	u8* scan(u8* dest, u64 size)...

	\\ Get the arguments passed to the program
	\\ @param pargv Address of the pointer where the pointer of the first argument will be stored
	\\ @return The number of arguments passed to the program
	u64 getargs(u8*** pargv)...

	\\ Get the environment variables passed to the program
	\\ @return The pointer to an array of environment variables
	u8** getenv()...



	i32 print(u8* str)!:
		return print(str, strlen(str))

	i32 print(i64 num)!:
		u8 str[32]
		return print(itos(num, str, 10))

	u8* scan(u8* dest, u64 size)!:
		u8* begin = dest

		while size--: *dest++ = getchar()

		*dest = null
		return begin

	u64 getargs(u8*** pargv)!:
		u64 argc
		assembly:
			"mov rcx, [__##__argc]"
			"mov [rbp $(argc)], rcx"

		if !pargv: return argc

		u8** argv
		assembly:
			"mov rcx, [__##__argv]"
			"mov [rbp $(argv)], rcx"

		*pargv = argv

		return argc

	u8** getenv()!:
		u8** env
		assembly:
			"mov rcx, [__##__envp]"
			"mov [rbp $(env)], rcx"

		return env

import.linux "linux/std.qnp"
import.windows "windows/std.qnp"