\\ QINP Standard Library
\\ Platform independent implementation


import "system.qnp"
import "math.qnp"
import "memory.qnp"
import "string.qnp"
import "time.qnp"


\\ Convenience definitions
define EXIT_SUCCESS 0
define EXIT_FAILURE 1

define char i8
define short i16
define int i32
define long i64

define uchar u8
define ushort u16
define uint u32
define ulong u64


space std:
	\\ Print the first num chars of a string to stdout
	\\ @param str The string to print
	\\ @param len The length of the string to print
	\\ @return The number of characters printed. Negative on error.
	i32 printn(u8 const* str, u64 num)...		\\ Platform dependent implementation

	\\ Print a null-terminated string to stdout
	\\ @param str The null-terminated string to print
	\\ @return The number of characters printed. Negative on error.
	i32 print(u8 const* str)...

	\\ Print a base-10 integer to stdout
	\\ @param num The integer to print
	\\ @return The number of characters printed. Negative on error.
	i32 print(i64 num)...

	\\ Print two or more values of different types consecutively to stdout
	\\ @param val The first value to print
	\\ @param ... The remaining values to print
	\\ @return The number of characters printed. Negative on error.
	blueprint T
	i32 print(T val, ...)...

	\\ Format a string and print it to stdout
	\\ @param str The string to print
	\\ @param val The first argument placed in the string
	\\ @return The number of characters printed. Negative on error.
	blueprint T
	i32 print(u8 const* str, T val)...

	\\ Format a string and print it to stdout
	\\ @param str The string to print
	\\ @param val The first argument placed in the string
	\\ @param ... The remaining arguments placed in the string
	\\ @return The number of characters printed. Negative on error.
	blueprint T
	i32 print(u8 const* str, T val, ...)...

	blueprint T
	i32 __print(u8 const** pStr, T val)...

	\\ Reads a character from stdin
	\\ @return The character read from stdin
	u8 getchar()...		\\ Platform dependent implementation

	\\ Read a null-terminated string from stdin
	\\ @param dest The destination buffer
	\\ @param size The size of the destination buffer
	\\ @return Address of the destination buffer
	u8* scan(u8* dest, u64 size)...



	i32 print(u8 const* str)!:
		return printn(str, strlen(str))

	i32 print(i64 num)!:
		u8 str[32]
		return print(itos(num, str, 10))

	blueprint T
	i32 print(T val, ...)!:
		return print(val) + print(...)

	blueprint T
	i32 print(u8 const* str, T val)!:
		return __print(&str, val) + print(str)

	blueprint T
	i32 print(u8 const* str, T val, ...)!:
		return __print(&str, val) + print(str, ...)
	
	blueprint T
	i32 __print(u8 const** pStr, T val)!:
		u8 const* str = *pStr
		u8 const* dropIndex = strchr(str, '%')
		if dropIndex == null:
			*pStr = str + strlen(str)
			return print(str) + print(val)
		
		*pStr = dropIndex + 1
		return printn(str, (u64)(dropIndex - str)) + print(val)

	u8* scan(u8* dest, u64 size)!:
		u8* begin = dest

		while size--: *dest++ = getchar()

		*dest = null
		return begin

import.linux "platform/linux/std.qnp"
import.windows "platform/windows/std.qnp"