\\ QINP Standard Library
\\ Platform independent implementation


import "system.qnp"
import "math.qnp"
import "memory.qnp"
import "string.qnp"
import "time.qnp"


\\ Convenience definitions
define EXIT_SUCCESS 0
define EXIT_FAILURE 1

define char i8
define short i16
define int i32
define long i64

define uchar u8
define ushort u16
define uint u32
define ulong u64


space std:

	\\ Print a null-terminated string to stdout
	\\ @param str The null-terminated string to print
	\\ @return The number of characters printed. Negative on error.
	i32 print(u8 const* str)...
	\\ blueprint T
	\\ i32 print(const T& str)...

	\\ Formatted print
	\\ blueprint T,
	\\ i32 print(const T& str, const T& value)...
	\\ blueprint T, ...
	\\ i32 print(const u8* str, const T& value, ...)...

	\\ Print a string of specified length to stdout
	\\ @param str The string to print
	\\ @param len The length of the string to print
	\\ @return The number of characters printed. Negative on error.
	i32 print(u8 const* str, u64 len)...		\\ Platform dependent implementation

	\\ Print a base-10 integer to stdout
	\\ @param num The integer to print
	\\ @return The number of characters printed. Negative on error.
	i32 print(i64 num)...

	\\ Reads a character from stdin
	\\ @return The character read from stdin
	u8 getchar()...		\\ Platform dependent implementation

	\\ Read a null-terminated string from stdin
	\\ @param dest The destination buffer
	\\ @param size The size of the destination buffer
	\\ @return Address of the destination buffer
	u8* scan(u8* dest, u64 size)...



	i32 print(u8 const* str)!:
		return print(str, strlen(str))

	i32 print(i64 num)!:
		u8 str[32]
		return print(itos(num, str, 10))

	u8* scan(u8* dest, u64 size)!:
		u8* begin = dest

		while size--: *dest++ = getchar()

		*dest = null
		return begin

import.linux "platform/linux/std.qnp"
import.windows "platform/windows/std.qnp"