\\ QINP Standard Library
\\ Platform independent implementation


import "math.qnp"
import "string.qnp"


\\ Convenience definitions
define EXIT_SUCCESS 0
define EXIT_FAILURE 1

define char i8
define short i16
define int i32
define long i64

define uchar u8
define ushort u16
define uint u32
define ulong u64

define _FILE i32
define _RESULT i32

space std:
	\\ Terminate the calling process and return the specified exit status.
	\\ @param status The exit status to return to the parent process.
	void exit(i32 status)...		\\ Platform dependent implementation

	\\ Print a null-terminated string to stdout
	\\ @param str The null-terminated string to print
	\\ @return The number of characters printed. Negative on error.
	_RESULT print(u8* str)...
	\\ blueprint T
	\\ _RESULT print(const T& str)...

	\\ Formatted print
	\\ blueprint T,
	\\ _RESULT print(const T& str, const T& value)...
	\\ blueprint T, ...
	\\ _RESULT print(const u8* str, const T& value, ...)...

	\\ Print a string of specified length to stdout
	\\ @param str The string to print
	\\ @param len The length of the string to print
	\\ @return The number of characters printed. Negative on error.
	_RESULT print(u8* str, u64 len)...		\\ Platform dependent implementation

	\\ Print a base-10 integer to stdout
	\\ @param num The integer to print
	\\ @return The number of characters printed. Negative on error.
	_RESULT print(i64 num)...

	\\ Reads a character from stdin
	\\ @return The character read from stdin
	u8 getchar()...		\\ Platform dependent implementation

	\\ Read a null-terminated string from stdin
	\\ @param dest The destination buffer
	\\ @param size The size of the destination buffer
	\\ @return Address of the destination buffer
	u8* scan(u8* dest, u64 size)...

	\\ Copy data from one buffer to another
	\\ @param dest The destination buffer
	\\ @param src The source buffer
	\\ @param len The number of bytes to copy
	\\ @return The destination buffer
	void* memcpy(void* dest, void* src, u64 len)...

	\\ Get the arguments passed to the program
	\\ @param pargv Address of the pointer where the pointer of the first argument will be stored
	\\ @return The number of arguments passed to the program
	u64 getargs(u8*** pargv)...

	\\ Get the environment variables passed to the program
	\\ @return The pointer to an array of environment variables
	u8** getenv()...

	\\ Sleep for the specified number of milliseconds
	\\ @param ms The number of milliseconds to sleep
	\\ @return Zero on success, negative on error
	_RESULT sleep(u64 ms)...		\\ Platform dependent implementation

	\\ Control device
	\\ @param fd An open file descriptor
	\\ @param request The request to perform
	\\ @param arg The argument to the request
	\\ @return The result of the request
	_RESULT ioctl(_FILE fd, u32 request, void* parg)...

	\\ Open a file
	\\ @param filename The path to the file to open
	\\ @param flags The flags to use when opening the file
	\\ @param mode The mode to use when opening the file
	\\ @return An open file descriptor
	_FILE open(u8* filename, i32 flags, u16 mode)...



	_RESULT print(u8* str):
		return print(str, strlen(str))

	_RESULT print(i64 num):
		u8 str[32]
		return print(itos(num, str, 10))

	u8* scan(u8* dest, u64 size):
		if !size:
			return dest
		u8* begin = dest

		while --size:
			*dest++ = getchar()

		*dest = '\0'
		return begin

	void* memcpy(void* dest, void* src, u64 len):
		u8* d = (u8*)dest
		u8* s = (u8*)src

		while len--:
			*d++ = *s++
		return dest

	u64 getargs(u8*** pargv):
		u64 argc
		assembly:
			"mov rcx, [__##__argc]"
			"mov [rbp $(argc)], rcx"

		if !pargv:
			return argc

		u8** argv
		assembly:
			"mov rcx, [__##__argv]"
			"mov [rbp $(argv)], rcx"

		*pargv = argv

		return argc

	u8** getenv():
		u8** env
		assembly:
			"mov rcx, [__##__envp]"
			"mov [rbp $(env)], rcx"

		return env

import.linux "linux/std.qnp"
import.windows "windows/std.qnp"