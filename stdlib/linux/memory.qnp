\\ QINP Standard Library
\\ Memory - Linux Specific

import "syscall.qnp"

space std:
	define PAGE_SIZE 4096

	u64 __brk(u64 addr):
		u64 result
		assembly:
			"mov rax, $(SYS_BRK)"
			"mov rdi, [rbp $(addr)]"
			"syscall"
			"mov [rbp $(result)], rax"
		return result

	void* __sbrk(u64 increment):
		u64 curr_size = __brk(0)
		u64 new_size = curr_size + increment
		if __brk(new_size) == curr_size:
			return null
		return (void*)curr_size

	pack __ChunkHeader:
		__ChunkHeader* prev
		__ChunkHeader* next
		u64 sizeAvail


	__ChunkHeader* __chunkList = null


	__ChunkHeader* __getAvailChunk(u64 minSizeAvail):
		__ChunkHeader* match = null
		__ChunkHeader* curr = __chunkList
		while curr != null:
			if curr->sizeAvail >= minSizeAvail && (match == null || curr->sizeAvail < match->sizeAvail):
				match = curr
			curr = curr->next

		return match

	void __insertAvailChunk(__ChunkHeader* chunk):
		__ChunkHeader* curr = __chunkList
		if curr == null:
			__chunkList = chunk
			chunk->prev = null
			chunk->next = null
			return
		
		while curr != null && curr > chunk:
			curr = curr->next

		chunk->prev = curr
		chunk->next = curr->next

		curr->next = chunk
		if chunk->next != null:
			chunk->next->prev = chunk

	void __removeAvailChunk(__ChunkHeader* chunk):
		if chunk->prev != null:
			chunk->prev->next = chunk->next
		if chunk->next != null:
			chunk->next->prev = chunk->prev
		if chunk == __chunkList:
			__chunkList = chunk->next

	void __shrinkChunk(__ChunkHeader* chunk, u64 newSizeAvail):
		if newSizeAvail + sizeof(__ChunkHeader) >= chunk->sizeAvail:
			return

		u64 newSize = newSizeAvail + sizeof(__ChunkHeader)

		__ChunkHeader* newChunk = (__ChunkHeader*)((u8*)chunk + newSize)
		newChunk->sizeAvail = chunk->sizeAvail - newSize - sizeof(__ChunkHeader)
		chunk->sizeAvail = newSizeAvail

		__insertAvailChunk(newChunk)

	__ChunkHeader* __allocChunk(u64 sizeAvail):
		u64 size = ((sizeof(__ChunkHeader) + sizeAvail + PAGE_SIZE - 1) / PAGE_SIZE) * PAGE_SIZE
		__ChunkHeader* chunk = (__ChunkHeader*)__sbrk(size)
		if chunk == null:
			return null

		chunk->prev = null
		chunk->next = null
		chunk->sizeAvail = size - sizeof(__ChunkHeader)
		
		return chunk

	void* malloc(u64 size)!:
		__ChunkHeader* chunk = __getAvailChunk(size)
		if chunk != null:
			__removeAvailChunk(chunk)
		else:
			chunk = __allocChunk(size)

		if chunk == null:
			return null

		__shrinkChunk(chunk, size)
		return chunk + 1

	void free(void* ptr)!:
		return
